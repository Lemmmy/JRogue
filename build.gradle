import proguard.gradle.ProGuardTask
import org.gradle.api.java.archives.internal.DefaultManifest
import org.gradle.api.internal.file.IdentityFileResolver

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		jcenter()
	}

	dependencies {
		classpath "net.sf.proguard:proguard-gradle:6.0.3"
	}
}

plugins {
	id "io.franzbecker.gradle-lombok" version "2.1"
	id "java"
	id "idea"
	id "application"
}

def jarName = "JRogue"
mainClassName = "jr.JRogue"
version = "alpha-0.4"

sourceCompatibility = 1.8

applicationDefaultJvmArgs = ["-XX:-UseAdaptiveSizePolicy", "-XX:+UseParallelGC"]

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}

dependencies {
	compile group: "org.apache.logging.log4j", name: "log4j-api", version: "2.11.2"
	compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.11.2"

	compile group: "commons-cli", name: "commons-cli", version: "1.4"
	compile group: "org.apache.commons", name: "commons-lang3", version: "3.8.1"
	compile group: "org.apache.commons", name: "commons-text", version: "1.6"

	compile group: "com.github.alexeyr.pcg", name: "pcg", version: "0.9.1"
	compile group: "org.ini4j", name: "ini4j", version: "0.5.4"
	compile group: "org.reflections", name: "reflections", version: "0.9.11"
	compile group: "com.google.code.gson", name: "gson", version: "2.8.5"

	compile group: "org.fusesource.jansi", name: "jansi", version: "1.17.1"

	compile group: "com.badlogicgames.gdx", name: "gdx", version: "1.9.9"
	compile group: "com.badlogicgames.gdx", name: "gdx-freetype", version: "1.9.9"
	compile group: "com.badlogicgames.gdx", name: "gdx-backend-lwjgl3", version: "1.9.9"
	compile group: "com.badlogicgames.gdx", name: "gdx-platform", version: "1.9.9", classifier: "natives-desktop"
	compile group: "com.badlogicgames.gdx", name: "gdx-freetype-platform", version: "1.9.9", classifier: "natives-desktop"

	compile group: "ninja.leaping.configurate", name: "configurate-hocon", version: "3.3"
}

tasks.withType(JavaCompile) {
	options.incremental = true
}

def makeManifest() {
	return (Map<String, Object>) [
		"Main-Class": mainClassName,
		"Version": project.version.toString(),
		"Build-Date": new Date().toString(),
		"Build-Revision": project.hasProperty("buildRevision") ? project.getProperty("buildRevision") : "unknown",
		"Build-Branch": project.hasProperty("buildBranch") ? project.getProperty("buildBranch") : "unknown",
		"Build-Number": project.hasProperty("buildNumber") ? project.getProperty("buildNumber") : "-1"
	]
}

processResources {
	def manifest = new DefaultManifest(new IdentityFileResolver())
	manifest.attributes(makeManifest())
	mkdir("$buildDir/generated")
	mkdir("$buildDir/generated/META-INF")
	manifest.writeTo("$buildDir/generated/META-INF/MANIFEST.MF")
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"]
		}

		resources {
			srcDirs = ["src/main/resources", "$buildDir/generated"]
		}
	}
}

task subJar(type: Jar) {
	baseName = jarName + "-deobf"
	destinationDir = file("$buildDir/tmp")

	manifest {
		attributes makeManifest()
	}

	with jar
}

task obfuscate(type: ProGuardTask, dependsOn: "subJar") {
	configuration "proguard.conf"

	injars "$buildDir/tmp/${jarName}-deobf-${version}.jar"
	outjars "$buildDir/tmp/${jarName}-obf-${version}.jar"

	libraryjars "${System.getProperty("java.home")}/lib/rt.jar"
	libraryjars files(configurations.compile.collect())

	printmapping "proguard.map"
}

task fullDistBuild(type: Jar, dependsOn: "obfuscate") {
	baseName = jarName + "-full"

	from zipTree("$buildDir/tmp/${jarName}-obf-${version}.jar")
	files(configurations.compile.collect()).each { f ->
		from zipTree(f)
	}

	manifest {
		attributes makeManifest()
	}
}

javadoc {
	source = sourceSets.main.allJava
	title = "JRogue API Documentation"

	if (project.hasProperty("javadocDir")) {
		destinationDir = file(project.getProperty("javadocDir"))
	} else {
		destinationDir = file("docs/")
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:-processing" << "-Xlint:unchecked" << "-Xlint:-rawtypes" << "-Xmaxerrs" << "9999" << "-Xlint:deprecation"
	}
}